from fastapi import FastAPI, Request
from pydantic import BaseModel
from typing import List, Optional
from crewai import Agent, Task, Crew
import os

app = FastAPI()

# üî∏ –ü—Ä–∞–≤–µ—Ä–∫–∞ –ø—Ä–∞—Ü—ã API
@app.get("/")
def root():
    return {"message": "üëã CrewAI API is running!"}

# üîπ –£–≤–∞—Ö–æ–¥–Ω–∞—è –º–∞–¥—ç–ª—å –¥–ª—è /ask
class AskRequest(BaseModel):
    question: str

@app.post("/ask")
async def ask_agent(request: AskRequest):
    question = request.question

    agent = Agent(
        role="AI Assistant",
        goal="Answer business-related questions and assist with client requests",
        backstory="You're Arthur, an AI assistant built by TechTask. You're helpful, polite and smart.",
        verbose=True
    )

    task = Task(description=question, agent=agent)

    crew = Crew(
        agents=[agent],
        tasks=[task],
        verbose=True
    )

    result = crew.run()
    return {"question": question, "answer": result}


# üß† –ê–≥–µ–Ω—Ç—ã
agents_storage = []

class AgentInput(BaseModel):
    role: str
    goal: str
    backstory: Optional[str] = None

@app.get("/agents")
def list_agents():
    return {"agents": agents_storage}

@app.post("/agents")
def create_agent(agent: AgentInput):
    agents_storage.append(agent.dict())
    return {"message": "Agent created", "agent": agent}


# üîß –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–ø–∞–∫—É–ª—å –ø—É—Å—Ç–∞)
@app.get("/tools")
def list_tools():
    return {"tools": []}


# ü§ù –°—Ç–≤–∞—Ä—ç–Ω–Ω–µ Crew (–∑ —É–º–æ–≤–∞–π, —à—Ç–æ —ë—Å—Ü—å —Ö–∞—Ü—è –± –∞–¥–∑—ñ–Ω –∞–≥–µ–Ω—Ç)
class CrewInput(BaseModel):
    task_description: str

@app.post("/crews")
def run_crew(input: CrewInput):
    if not agents_storage:
        return {"error": "No agents created yet"}

    agents = [
        Agent(
            role=a["role"],
            goal=a["goal"],
            backstory=a.get("backstory", ""),
            verbose=True
        )
        for a in agents_storage
    ]

    task = Task(
        description=input.task_description,
        agent=agents[0]  # –ø–µ—Ä—à—ã —è–∫ –∞—Å–Ω–æ—û–Ω—ã
    )

    crew = Crew(agents=agents, tasks=[task], verbose=True)
    result = crew.run()
    return {"task": input.task_description, "result": result}
